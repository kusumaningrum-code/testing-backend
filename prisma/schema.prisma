// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Event {
  event_id       Int      @id @default(autoincrement())
  name           String
  description    String
  price          Int
  date           DateTime
  time           DateTime
  location       String
  availableSeats Int
  organiserId    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organiser  User        @relation(fields: [organiserId], references: [id], name: "UserEvents")
  reviews    Review[]
  tickets    Ticket[]
  promotions Promotion[]
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  firstname    String
  lastname     String
  email        String   @unique
  password     String
  imgProfile   String?
  isVerified   Boolean  @default(false)
  role         Role     @default(CUSTOMER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  referralCode String   @unique
  referredBy   Int?
  points       Int
  events       Event[]  @relation("UserEvents")

  referredByUser User?    @relation("Referral", fields: [referredBy], references: [id])
  referrals      User[]   @relation("Referral")
  reviews        Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [event_id])
  user  User  @relation(fields: [userId], references: [id])
}

model Ticket {
  ticket_id  Int        @id @default(autoincrement())
  eventId    Int
  ticketType TicketType
  price      Int
  available  Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  event Event @relation(fields: [eventId], references: [event_id])
}

model Promotion {
  promotion_id   Int           @id @default(autoincrement())
  eventId        Int
  type           PromotionType
  value          Int
  promotionCode  String        @unique
  startDate      DateTime
  expirationDate DateTime
  maxUse         Int
  useCount       Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  event Event @relation(fields: [eventId], references: [event_id])
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum TicketType {
  REGULAR
  VIP
}

enum PromotionType {
  PERCENTAGE
  FLAT
}
